function arCuGetCookie(t) {
  return document.cookie.length > 0 &&
    ((c_start = document.cookie.indexOf(t + "=")), -1 != c_start)
    ? ((c_start = c_start + t.length + 1),
      (c_end = document.cookie.indexOf(";", c_start)),
      -1 == c_end && (c_end = document.cookie.length),
      unescape(document.cookie.substring(c_start, c_end)))
    : 0;
}
function arCuCreateCookie(t, e, s) {
  var n;
  if (s) {
    var i = new Date();
    i.setTime(i.getTime() + 24 * s * 60 * 60 * 1e3),
      (n = "; expires=" + i.toGMTString());
  } else n = "";
  document.cookie = t + "=" + e + n + "; path=/";
}
function arCuShowMessage(t) {
  if (arCuPromptClosed) return !1;
  void 0 !== arCuMessages[t]
    ? (jQuery("#arcontactus").contactUs("showPromptTyping"),
      (_arCuTimeOut = setTimeout(function () {
        if (arCuPromptClosed) return !1;
        jQuery("#arcontactus").contactUs("showPrompt", {
          content: arCuMessages[t],
        }),
          t++,
          (_arCuTimeOut = setTimeout(function () {
            if (arCuPromptClosed) return !1;
            arCuShowMessage(t);
          }, arCuMessageTime));
      }, arCuTypingTime)))
    : (arCuCloseLastMessage && jQuery("#arcontactus").contactUs("hidePrompt"),
      arCuLoop && arCuShowMessage(0));
}
function arCuShowMessages() {
  setTimeout(function () {
    clearTimeout(_arCuTimeOut), arCuShowMessage(0);
  }, arCuDelayFirst);
}
!(function (t) {
  function e(s, n) {
    (this._initialized = !1),
      (this.settings = null),
      (this.options = t.extend({}, e.Defaults, n)),
      (this.$element = t(s)),
      this.init(),
      (this.x = 0),
      (this.y = 0),
      this._interval,
      (this._menuOpened = !1),
      (this._callbackOpened = !1),
      (this.countdown = null);
  }
  (e.Defaults = {
    align: "left",
    countdown: 0,
    drag: !1,
    buttonText: "Mensaje",
    buttonSize: "large",
    menuSize: "normal",
    items: [],
    iconsAnimationSpeed: 1200,
    theme: "#00AA17",
    buttonIcon:
      '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M380.9 97.1C339 55.1 283.2 32 223.9 32c-122.4 0-222 99.6-222 222 0 39.1 10.2 77.3 29.6 111L0 480l117.7-30.9c32.4 17.7 68.9 27 106.1 27h.1c122.3 0 224.1-99.6 224.1-222 0-59.3-25.2-115-67.1-157zm-157 341.6c-33.2 0-65.7-8.9-94-25.7l-6.7-4-69.8 18.3L72 359.2l-4.4-7c-18.5-29.4-28.2-63.3-28.2-98.2 0-101.7 82.8-184.5 184.6-184.5 49.3 0 95.6 19.2 130.4 54.1 34.8 34.9 56.2 81.2 56.1 130.5 0 101.8-84.9 184.6-186.6 184.6zm101.2-138.2c-5.5-2.8-32.8-16.2-37.9-18-5.1-1.9-8.8-2.8-12.5 2.8-3.7 5.6-14.3 18-17.6 21.8-3.2 3.7-6.5 4.2-12 1.4-32.6-16.3-54-29.1-75.5-66-5.7-9.8 5.7-9.1 16.3-30.3 1.8-3.7.9-6.9-.5-9.7-1.4-2.8-12.5-30.1-17.1-41.2-4.5-10.8-9.1-9.3-12.5-9.5-3.2-.2-6.9-.2-10.6-.2-3.7 0-9.7 1.4-14.8 6.9-5.1 5.6-19.4 19-19.4 46.3 0 27.3 19.9 53.7 22.6 57.4 2.8 3.7 39.1 59.7 94.8 83.8 35.2 15.2 49 16.5 66.6 13.9 10.7-1.6 32.8-13.4 37.4-26.4 4.6-13 4.6-24.1 3.2-26.4-1.3-2.5-5-3.9-10.5-6.6z"></path></svg>',
    closeIcon:
      '<svg width="12" height="13" viewBox="0 0 14 14" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Canvas" transform="translate(-4087 108)"><g id="Vector"><use xlink:href="#path0_fill" transform="translate(4087 -108)" fill="currentColor"></use></g></g><defs><path id="path0_fill" d="M 14 1.41L 12.59 0L 7 5.59L 1.41 0L 0 1.41L 5.59 7L 0 12.59L 1.41 14L 7 8.41L 12.59 14L 14 12.59L 8.41 7L 14 1.41Z"></path></defs></svg>',
  }),
    (e.prototype.init = function () {
      this.destroy(),
        (this.settings = t.extend({}, this.options)),
        this.$element
          .addClass("arcontactus-widget")
          .addClass("arcontactus-message"),
        "left" === this.settings.align
          ? this.$element.addClass("left")
          : this.$element.addClass("right"),
        this.settings.items.length
          ? (this._initCallbackBlock(),
            this._initMessengersBlock(),
            this._initMessageButton(),
            this._initPrompt(),
            this._initEvents(),
            this.startAnimation(),
            this.$element.addClass("active"))
          : console.info("jquery.contactus:no items"),
        (this._initialized = !0),
        this.$element.trigger("arcontactus.init");
    }),
    (e.prototype.destroy = function () {
      if (!this._initialized) return !1;
      this.$element.html(""),
        (this._initialized = !1),
        this.$element.trigger("arcontactus.destroy");
    }),
    (e.prototype._initCallbackBlock = function () {}),
    (e.prototype._initMessengersBlock = function () {
      var e = t("<div>", { class: "messangers-block" });
      ("normal" !== this.settings.menuSize &&
        "large" !== this.settings.menuSize) ||
        e.addClass("lg"),
        "small" === this.settings.menuSize && e.addClass("sm"),
        this._appendMessengerIcons(e),
        this.$element.append(e);
    }),
    (e.prototype._appendMessengerIcons = function (e) {
      t.each(this.settings.items, function (s) {
        if ("callback" == this.href)
          var n = t("<div>", {
            class: "messanger call-back " + (this.class ? this.class : ""),
          });
        else if (
          ((n = t("<a>", {
            class: "messanger " + (this.class ? this.class : ""),
            id: this.id ? this.id : null,
            href: this.href,
            target: this.target ? this.target : "_blank",
          })),
          this.onClick)
        ) {
          var i = this;
          n.on("click", function (t) {
            i.onClick(t);
          });
        }
        var a = t("<span>", {
          style: this.color ? "background-color:" + this.color : null,
        });
        a.append(this.icon),
          n.append(a),
          n.append("<p>" + this.title + "</p>"),
          e.append(n);
      });
    }),
    (e.prototype._initMessageButton = function () {
      var e = this,
        s = t("<div>", {
          class: "arcontactus-message-button",
          style: this._backgroundStyle(),
        });
      "large" === this.settings.buttonSize && this.$element.addClass("lg"),
        "medium" === this.settings.buttonSize && this.$element.addClass("md"),
        "small" === this.settings.buttonSize && this.$element.addClass("sm");
      var n = t("<div>", { class: "static" });
      n.append(this.settings.buttonIcon),
        !1 !== this.settings.buttonText
          ? n.append("<p>" + this.settings.buttonText + "</p>")
          : s.addClass("no-text");
      var i = t("<div>", { class: "callback-state", style: e._colorStyle() });
      i.append(this.settings.callbackStateIcon);
      var a = t("<div>", { class: "icons hide" }),
        o = t("<div>", { class: "icons-line" });
      t.each(this.settings.items, function (s) {
        var n = t("<span>", { style: e._colorStyle() });
        n.append(this.icon), o.append(n);
      }),
        a.append(o);
      var r = t("<div>", { class: "arcontactus-close" });
      r.append(this.settings.closeIcon);
      var c = t("<div>", { class: "pulsation", style: e._backgroundStyle() }),
        l = t("<div>", { class: "pulsation", style: e._backgroundStyle() });
      s.append(n).append(i).append(a).append(r).append(c).append(l),
        this.$element.append(s);
    }),
    (e.prototype._initPrompt = function () {
      var e = t("<div>", { class: "arcontactus-prompt" }),
        s = t("<div>", {
          class: "arcontactus-prompt-close",
          style: this._colorStyle(),
        });
      s.append(this.settings.closeIcon);
      var n = t("<div>", { class: "arcontactus-prompt-inner" });
      e.append(s).append(n), this.$element.append(e);
    }),
    (e.prototype._initEvents = function () {
      var e = this.$element,
        s = this;
      e
        .find(".arcontactus-message-button")
        .on("mousedown", function (t) {
          (s.x = t.pageX), (s.y = t.pageY);
        })
        .on("mouseup", function (t) {
          t.pageX === s.x &&
            t.pageY === s.y &&
            (s.toggleMenu(), t.preventDefault());
        }),
        this.settings.drag &&
          (e.draggable(),
          e.get(0).addEventListener(
            "touchmove",
            function (t) {
              var s = t.targetTouches[0];
              (e.get(0).style.left = s.pageX - 25 + "px"),
                (e.get(0).style.top = s.pageY - 25 + "px"),
                t.preventDefault();
            },
            !1
          )),
        t(document).on("click", function (t) {
          s.closeMenu();
        }),
        e.on("click", function (t) {
          t.stopPropagation();
        }),
        e.find(".call-back").on("click", function () {
          s.openCallbackPopup();
        }),
        e.find(".callback-countdown-block-close").on("click", function () {
          null != s.countdown &&
            (clearInterval(s.countdown), (s.countdown = null)),
            s.closeCallbackPopup();
        }),
        e.find(".arcontactus-prompt-close").on("click", function () {
          s.hidePrompt();
        });
    }),
    (e.prototype.show = function () {
      this.$element.addClass("active"),
        this.$element.trigger("arcontactus.show");
    }),
    (e.prototype.hide = function () {
      this.$element.removeClass("active"),
        this.$element.trigger("arcontactus.hide");
    }),
    (e.prototype.openMenu = function () {
      var t = this.$element;
      t.find(".messangers-block").hasClass("show-messageners-block") ||
        (this.stopAnimation(),
        t
          .find(".messangers-block, .arcontactus-close")
          .addClass("show-messageners-block"),
        t.find(".icons, .static").addClass("hide"),
        t.find(".pulsation").addClass("stop"),
        (this._menuOpened = !0),
        this.$element.trigger("arcontactus.openMenu"));
    }),
    (e.prototype.closeMenu = function () {
      var t = this.$element;
      t.find(".messangers-block").hasClass("show-messageners-block") &&
        (t
          .find(".messangers-block, .arcontactus-close")
          .removeClass("show-messageners-block"),
        t.find(".icons, .static").removeClass("hide"),
        t.find(".pulsation").removeClass("stop"),
        this.startAnimation(),
        (this._menuOpened = !1),
        this.$element.trigger("arcontactus.closeMenu"));
    }),
    (e.prototype.toggleMenu = function () {
      var t = this.$element;
      if (
        (this.hidePrompt(),
        t.find(".callback-countdown-block").hasClass("display-flex"))
      )
        return !1;
      t.find(".messangers-block").hasClass("show-messageners-block")
        ? this.closeMenu()
        : this.openMenu(),
        this.$element.trigger("arcontactus.toggleMenu");
    }),
    (e.prototype.openCallbackPopup = function () {
      var t = this.$element;
      t.addClass("opened"),
        this.closeMenu(),
        this.stopAnimation(),
        t.find(".icons, .static").addClass("hide"),
        t.find(".pulsation").addClass("stop"),
        t.find(".callback-countdown-block").addClass("display-flex"),
        (this._callbackOpened = !0),
        this.$element.trigger("arcontactus.openCallbackPopup");
    }),
    (e.prototype.closeCallbackPopup = function () {
      var t = this.$element;
      t.removeClass("opened"),
        t.find(".messangers-block").removeClass("show-messageners-block"),
        t.find(".arcontactus-close").removeClass("show-messageners-block"),
        t.find(".icons, .static").removeClass("hide"),
        this.startAnimation(),
        (this._callbackOpened = !1),
        this.$element.trigger("arcontactus.closeCallbackPopup");
    }),
    (e.prototype.startAnimation = function () {
      var t = this.$element,
        e = t.find(".icons-line"),
        s = t.find(".static"),
        n = t.find(".icons-line>span:first-child").width() + 40;
      if ("large" === this.settings.buttonSize)
        var i = 2,
          a = 0;
      "medium" === this.settings.buttonSize && ((i = 4), (a = -2)),
        "small" === this.settings.buttonSize && ((i = 4), (a = -2));
      var o = t.find(".icons-line>span").length,
        r = 0;
      if ((this.stopAnimation(), 0 === this.settings.iconsAnimationSpeed))
        return !1;
      this._interval = setInterval(function () {
        0 === r && (e.parent().removeClass("hide"), s.addClass("hide"));
        var t = "translate(" + -(n * r + i) + "px, " + a + "px)";
        e.css({ "-webkit-transform": t, "-ms-transform": t, transform: t }),
          ++r > o &&
            (r > o + 1 && (r = 0),
            e.parent().addClass("hide"),
            s.removeClass("hide"),
            (t = "translate(" + -i + "px, " + a + "px)"),
            e.css({
              "-webkit-transform": t,
              "-ms-transform": t,
              transform: t,
            }));
      }, this.settings.iconsAnimationSpeed);
    }),
    (e.prototype.stopAnimation = function () {
      clearInterval(this._interval);
      var t = this.$element,
        e = t.find(".icons-line"),
        s = t.find(".static");
      e.parent().addClass("hide"), s.removeClass("hide");
      var n = "translate(-2px, 0px)";
      e.css({ "-webkit-transform": n, "-ms-transform": n, transform: n });
    }),
    (e.prototype.showPrompt = function (t) {
      var e = this.$element.find(".arcontactus-prompt");
      t && t.content && e.find(".arcontactus-prompt-inner").html(t.content),
        e.addClass("active"),
        this.$element.trigger("arcontactus.showPrompt");
    }),
    (e.prototype.hidePrompt = function () {
      this.$element.find(".arcontactus-prompt").removeClass("active"),
        this.$element.trigger("arcontactus.hidePrompt");
    }),
    (e.prototype.showPromptTyping = function () {
      this.$element
        .find(".arcontactus-prompt")
        .find(".arcontactus-prompt-inner")
        .html(""),
        this._insertPromptTyping(),
        this.showPrompt({}),
        this.$element.trigger("arcontactus.showPromptTyping");
    }),
    (e.prototype._insertPromptTyping = function () {
      var e = this.$element.find(".arcontactus-prompt-inner"),
        s = t("<div>", { class: "arcontactus-prompt-typing" }),
        n = t("<div>");
      s.append(n), s.append(n.clone()), s.append(n.clone()), e.append(s);
    }),
    (e.prototype.hidePromptTyping = function () {
      this.$element.find(".arcontactus-prompt").removeClass("active"),
        this.$element.trigger("arcontactus.hidePromptTyping");
    }),
    (e.prototype._backgroundStyle = function () {
      return "background-color: " + this.settings.theme;
    }),
    (e.prototype._colorStyle = function () {
      return "color: " + this.settings.theme;
    }),
    (t.fn.contactUs = function (s) {
      var n = Array.prototype.slice.call(arguments, 1);
      return this.each(function () {
        var i = t(this),
          a = i.data("ar.contactus");
        a ||
          ((a = new e(this, "object" == typeof s && s)),
          i.data("ar.contactus", a)),
          "string" == typeof s && "_" !== s.charAt(0) && a[s].apply(a, n);
      });
    }),
    (t.fn.contactUs.Constructor = e);
})(jQuery);
